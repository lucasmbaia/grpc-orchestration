// Code generated by protoc-gen-go.
// source: orchestration.proto
// DO NOT EDIT!

/*
Package orchestrarion is a generated protocol buffer package.

It is generated from these files:
	orchestration.proto

It has these top-level messages:
	Task
	Result
*/
package orchestrarion

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Task struct {
	Tracking   string `protobuf:"bytes,1,opt,name=tracking" json:"tracking,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Parameters string `protobuf:"bytes,3,opt,name=parameters" json:"parameters,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Task) GetTracking() string {
	if m != nil {
		return m.Tracking
	}
	return ""
}

func (m *Task) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Task) GetParameters() string {
	if m != nil {
		return m.Parameters
	}
	return ""
}

type Result struct {
	Resutl map[string]string `protobuf:"bytes,1,rep,name=resutl" json:"resutl,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Result) GetResutl() map[string]string {
	if m != nil {
		return m.Resutl
	}
	return nil
}

func init() {
	proto.RegisterType((*Task)(nil), "orchestration.Task")
	proto.RegisterType((*Result)(nil), "orchestration.Result")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for OrchestrationService service

type OrchestrationServiceClient interface {
	CallTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Result, error)
	Health(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type orchestrationServiceClient struct {
	cc *grpc.ClientConn
}

func NewOrchestrationServiceClient(cc *grpc.ClientConn) OrchestrationServiceClient {
	return &orchestrationServiceClient{cc}
}

func (c *orchestrationServiceClient) CallTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/orchestration.OrchestrationService/CallTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationServiceClient) Health(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/orchestration.OrchestrationService/Health", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrchestrationService service

type OrchestrationServiceServer interface {
	CallTask(context.Context, *Task) (*Result, error)
	Health(context.Context, *google_protobuf1.Empty) (*google_protobuf1.Empty, error)
}

func RegisterOrchestrationServiceServer(s *grpc.Server, srv OrchestrationServiceServer) {
	s.RegisterService(&_OrchestrationService_serviceDesc, srv)
}

func _OrchestrationService_CallTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServiceServer).CallTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orchestration.OrchestrationService/CallTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServiceServer).CallTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestrationService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orchestration.OrchestrationService/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServiceServer).Health(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrchestrationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "orchestration.OrchestrationService",
	HandlerType: (*OrchestrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallTask",
			Handler:    _OrchestrationService_CallTask_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _OrchestrationService_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orchestration.proto",
}

func init() { proto.RegisterFile("orchestration.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 318 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x91, 0xb1, 0x4e, 0x02, 0x41,
	0x10, 0x86, 0x3d, 0xc0, 0x0b, 0x0e, 0x1a, 0xcd, 0x80, 0xe6, 0x72, 0x1a, 0x83, 0x57, 0x51, 0xdd,
	0x45, 0x6c, 0xc0, 0x52, 0x43, 0x62, 0x61, 0x62, 0x82, 0xc6, 0xc2, 0x6e, 0x21, 0x23, 0x5c, 0x58,
	0x76, 0x2f, 0xbb, 0x73, 0x24, 0x34, 0x16, 0xbe, 0x82, 0xbd, 0x2f, 0xe5, 0x2b, 0xf8, 0x20, 0x86,
	0x3d, 0x50, 0x30, 0x5a, 0xed, 0xcc, 0x37, 0x33, 0xbb, 0xff, 0xfc, 0x0b, 0x75, 0x6d, 0x86, 0x63,
	0xb2, 0x6c, 0x04, 0xa7, 0x5a, 0xc5, 0x99, 0xd1, 0xac, 0x71, 0x6f, 0x03, 0x86, 0x27, 0x23, 0xad,
	0x47, 0x92, 0x12, 0x91, 0xa5, 0x89, 0x50, 0x4a, 0xb3, 0xc3, 0xb6, 0x68, 0x0e, 0x8f, 0x97, 0x55,
	0x97, 0x0d, 0xf2, 0xe7, 0x84, 0xa6, 0x19, 0xcf, 0x8b, 0x62, 0xf4, 0x08, 0x95, 0x07, 0x61, 0x27,
	0x18, 0x42, 0x95, 0x8d, 0x18, 0x4e, 0x52, 0x35, 0x0a, 0xbc, 0xa6, 0xd7, 0xda, 0xe9, 0x7f, 0xe7,
	0x88, 0x50, 0x51, 0x62, 0x4a, 0x41, 0xc9, 0x71, 0x17, 0xe3, 0x29, 0x40, 0x26, 0x8c, 0x98, 0x12,
	0x93, 0xb1, 0x41, 0xd9, 0x55, 0xd6, 0x48, 0xf4, 0x02, 0x7e, 0x9f, 0x6c, 0x2e, 0x19, 0xbb, 0xe0,
	0x1b, 0xb2, 0x39, 0xcb, 0xc0, 0x6b, 0x96, 0x5b, 0xb5, 0xf6, 0x59, 0xbc, 0xb9, 0x51, 0xd1, 0xe6,
	0x0e, 0x96, 0x3d, 0xc5, 0x66, 0xde, 0x5f, 0x0e, 0x84, 0x5d, 0xa8, 0xad, 0x61, 0x3c, 0x80, 0xf2,
	0x84, 0xe6, 0x4b, 0x79, 0x8b, 0x10, 0x1b, 0xb0, 0x3d, 0x13, 0x32, 0x5f, 0x49, 0x2b, 0x92, 0xcb,
	0x52, 0xc7, 0x6b, 0xbf, 0x7b, 0xd0, 0xb8, 0x5b, 0x7f, 0xe7, 0x9e, 0xcc, 0x2c, 0x1d, 0x12, 0x76,
	0xa0, 0x7a, 0x2d, 0xa4, 0x74, 0x4b, 0xd7, 0x7f, 0x49, 0x59, 0xc0, 0xf0, 0xf0, 0x4f, 0x7d, 0xd1,
	0x16, 0xde, 0x82, 0x7f, 0x43, 0x42, 0xf2, 0x18, 0x8f, 0xe2, 0xc2, 0xd2, 0x78, 0x65, 0x69, 0xdc,
	0x5b, 0x58, 0x1a, 0xfe, 0xc3, 0x23, 0x7c, 0xfd, 0xf8, 0x7c, 0x2b, 0xed, 0x22, 0x24, 0xb3, 0xf3,
	0x64, 0xec, 0xee, 0xb8, 0xda, 0x7f, 0xfa, 0xf9, 0x44, 0x93, 0x6a, 0x35, 0xf0, 0xdd, 0xd0, 0xc5,
	0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3a, 0x3c, 0xc3, 0x87, 0xf1, 0x01, 0x00, 0x00,
}
